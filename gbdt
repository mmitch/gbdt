#!/bin/bash
#
# gbdt - git based deployment tool
#
# Copyright (C) 2015  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v3 or later.
#
# see https://github.com/mmitch/gbdt
#

set -e

# verbose mode - initialize immediately if needed
VERBOSE=
if [ "$1" = '-vv' ]; then
    shift
    VERBOSE=2
    set -x
fi
if [ "$1" = '-v' ]; then
    shift
    if [ "$1" = '-v' ]; then
	set -x
	VERBOSE=2
	shift
    else
	VERBOSE=1
    fi
fi

# subroutines
#############################################################

# error out with a message on stderr (ABnormal ENDing)
# $*: the message
abend()
{
    echo ERROR: "$*" >&2
    exit 1
}

# print a message to stdout only if verbose mode is active
# $*: the message
log_info()
{
    if [ $VERBOSE ]; then
	echo "$*"
    fi
}


# show usage end exit
show_help()
{
    cat <<EOF

gbdt - git based deployment tool

usage:
  gbdt [-v] <env> init           - initialize environment with CURRENT(!) state
  gbdt [-v] <env> deploy <tag>   - deploys tagged state to environment
  gbdt [-v] <env> status         - show status of an environment

  gbdt [-v] stage deploy         - deploys CURRENT state to staging
  gbdt [-v] stage stop           - remove staging environment

  gbdt [-v] status               - show status of all environments
  gbdt [-v] tags                 - show available <tags>

  <env> is an environment, see below
  <tag> is a git tag

environments:
  prod    - production
  stage   - staging

EOF
    exit 0
}


# empty post-deployment hook, can be overridden in ~/.gbdt
# $1: target_dir
# $2: environment_name
post_deploy()
{
    log_info 'empty post_deploy() was run'
    :
}


# check directory for a git repository
# TODO/FIXME: also check the repository, refs/heads/master could be anything...
# $1: target_dir
# return: 0 = ok, 1 = directory does not exist, 2 = directory contains no git repository
check_dir()
{
    DIR="$1"

    [ -d "$DIR" ] || return 1
    [ -d "$DIR"/.git ] || return 2

    log_info "check ok: \`$DIR' contains a git repository"
}


# check directory for the correct branch
# TODO/FIXME: also check the repository, refs/heads/master could be anything...
# $1: target_dir
# return: 0 = ok, 1 = directory does not exist, 2 = directory contains no git repository, 3 = different branch (see $RET_BRANCH)
check_branch()
{
    DIR="$1"

    check_dir "$DIR" || return $?

    CURRENT_BRANCH="$(git -C "$DIR" symbolic-ref -q HEAD)"
    if [ "$CURRENT_BRANCH" != "refs/heads/$GIT_BRANCH" ]; then
	RET_BRANCH="$CURRENT_BRANCH"
	return 3
    fi

    log_info "check ok: \`$DIR' contains branch \`$GIT_BRANCH'"
}


# initialize a repository
# $1: target_dir
# $2: environment_name
init_dir()
{
    DIR="$1"
    ENVIRONMENT="$2"

    if [ -d "$DIR"/.git ]; then
	check_dir "$DIR" || abend  "\`$DIR' already contains a git checkout, but the current branch differs: want \`$GIT_BRANCH' but got \`$RET_BRANCH'"
	[ $VERBOSE ] && echo "directory \`$DIR' already exists with correct branch \`$GIT_BRANCH'"
	return 0
    fi

    [ -d "$DIR" ] || mkdir -p "$DIR"

    git clone --branch "$GIT_BRANCH" --single-branch "$GIT_REPO" "$DIR"

    post_deploy "$DIR" "$ENVIRONMENT"

    log_info "directory \`$DIR' initialized with branch \`$GIT_BRANCH'"
}


# check environment and print results to stdout
# $1: target_dir
# $2: environment_name
check_environment()
{
    DIR="$1"
    ENVIRONMENT="$2"

    if check_dir "$DIR"; then
	CURRENT_BRANCH="$(git -C "$DIR" symbolic-ref --short -q HEAD || echo "$GIT_BRANCH" '(detached head)')"
	TAG="$(git -C "$DIR" describe --tags --always)"
	STATE="branch \`$CURRENT_BRANCH' at \`$TAG'"

    else
	case $? in
	    1)
		STATE="directory \`$DIR' does not exist"
		;;
	    2)
		STATE="directory \`$DIR' is no git repository"
		;;
	    3)
		STATE="wrong branch \`$RET_BRANCH' checked out"
		;;
	    *)
		abend 'unknown return code from check_dir() - b0rk b0rk b0rk'
		;;
	esac
	TAG=
    fi

    if [ $VERBOSE ]; then
	echo $ENVIRONMENT
	echo "  state:   $STATE"
	echo "  dir:     $DIR"
	echo "  branch:  $GIT_BRANCH"
	echo "  repo:    $GIT_REPO"
	if [ $TAG ]; then
	    echo "  tag message:"
	    echo -n "  "
	    git -C "$DIR" tag -n9 -l "$TAG"
	fi
	echo
    else
	echo "$ENVIRONMENT $STATE"
    fi

    return 0
}


# update environment
# $1: target_dir
# $2: environment_name
# $3: ref checkout
update_environment()
{
    DIR="$1"
    ENVIRONMENT="$2"
    REF="$3"

    check_dir "$DIR" || abend "directory \`$DIR' looks fishy"

    git -C "$DIR" pull --ff-only || abend "conflicts during fast-forward-only pull"
    git -C "$DIR" checkout "$REF"

    post_deploy "$DIR" "$ENVIRONMENT"

    log_info "$ENVIRONMENT updated to \`$REF'"
}


# show tags
show_tags()
{
    git ls-remote --tags "$GIT_REPO" | sed 's,^.*refs/tags/,,' | grep -E "$TAG_REGEXP"
}


# import configuration
import_config()
{
    [ -r ~/.gbdt ] || abend "no configuration in \`~/.gbdt' found"
    source ~/.gbdt

    [ "$PRODUCTION_DIR" ] || abend 'no $PRODUCTION_DIR given in config'
    [ "$STAGING_DIR" ]    || abend 'no $STAGING_DIR given in config'
    [ "$GIT_REPO" ]       || abend 'no $GIT_REPO given in config'
    [ "$GIT_BRANCH" ]     || GIT_BRANCH=master
    [ "$TAG_REGEXP" ]     || TAG_REGEXP=.
}


# main part
#############################################################

# figure out what to do
if [ "$1" = prod ]; then

    import_config
    
    if [ "$2" = init ]; then
	init_dir "$PRODUCTION_DIR" 'production'

    elif [ "$2" = deploy ]; then
	TAG="$3"
	[ "$TAG" ] || abend "no <tag> given"
	[[ "$TAG" =~ $TAG_REGEXP ]] || abend "tag \`$TAG' does not match \`$TAG_REGEXP'"
	update_environment "$PRODUCTION_DIR" 'production' "$TAG"

    elif [ "$2" = status ]; then
	check_environment "$PRODUCTION_DIR" 'production'

    else
	show_help

    fi
    
elif [ "$1" = stage ]; then

    import_config
    
    if [ "$2" = init ]; then
	init_dir "$STAGING_DIR" 'staging'

    elif [ "$2" = deploy ]; then
	TAG="$3"
	[ "$TAG" ] || TAG="$GIT_BRANCH"
	update_environment "$STAGING_DIR" 'staging' "$TAG"

    elif [ "$2" = status ]; then
	check_environment "$STAGING_DIR" 'staging:'

    elif [ "$2" = stop ]; then
	[ -d "$STAGING_DIR" ] || abend "staging directory does not exist"
	check_dir "$STAGING_DIR" || abend "staging directory looks fishy, I won't remove that"
	rm -rf "$STAGING_DIR"

    else
	show_help

    fi
    
elif [ "$1" = status ]; then

    import_config
    
    check_environment "$PRODUCTION_DIR" 'production: '
    check_environment "$STAGING_DIR"    'staging:    '

elif [ "$1" = tags ]; then

    import_config
    
    show_tags

else
    show_help
    
fi
